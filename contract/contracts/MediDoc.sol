// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

contract MediDocContract {
    enum State { Verified, Unverified }

    struct Document{
        string fileName;
        string  fileCID; // file CID generated by ipfs
        string fileKey;
        string fileHash;
        address  owner; // address of the owner of the document
        State  state; // verified or unverfied
        uint timestamp;
    }

    // state variables
    // map (wallet_address -> map hash -> Document))
    mapping(address => mapping(string => Document)) user_documents;

    // events
    event FileUploadLog(
        string fileCID,  
        address creator,
        address owner);


    function addDocument(
        string memory fileName, 
        string memory fileCID,
        string memory fileKey,
        string memory fileHash, 
        address ownerAddress
        ) public {
        Document memory doc = Document(
            fileName, fileCID, fileKey, fileHash, ownerAddress, State.Unverified, block.timestamp
        );
        user_documents[ownerAddress][fileHash] = doc;
        emit FileUploadLog(fileName,msg.sender, ownerAddress);
    }

    function getDocument(string memory fileHash) public view returns(Document memory) {
        return user_documents[msg.sender][fileHash];
    }


    function verify(string memory fileCID) public {
        // require( certificates[cid].issuer  == msg.sender,
        //     "Only issuer can verify a certificate"
        // );
        user_documents[msg.sender][fileCID].state = State.Verified;
    }

    function isVerified(string memory fileCID) public view returns(bool) {
        return user_documents[msg.sender][fileCID].state == State.Verified;
    }

    function isVerified2(address owner, string memory fileCID) public view returns(bool) {
        return user_documents[owner][fileCID].state == State.Verified;
    }
}